# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    # inputs:
    #   name:
    #     # Friendly description to be shown in the UI instead of 'name'
    #     description: 'Person to greet'
    #     # Default value if no value is explicitly provided
    #     default: 'World'
    #     # Input has to be provided for the workflow to run
    #     required: true
    #     # The data type of the input
    #     type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  setup:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'npm'
    - name: Install global tool Pnpm
      run: npm install -g pnpm
    - name: Install global tool Quasar
      run: npm install -g @quasar/cli
    - name: Install global tool Capacitor
      run: npm install -g capacitor
    - name: Install dependencies
      run: npm install

    - name: Setup iOS build
      #   run: node_modules/.bin/quasar dev --mode cordova --target ios
      # -   name: Create cordova source
      run: >
        node_modules/.bin/quasar build --mode capacitor --target ios --ide
        || true

    - name: List iOS build schemes
      run: >
        cd src-capacitor/ios/App &&
        xcodebuild
        -list
        && true

    # - name: Generate ExportOptions.plist
    #   uses: ./.github/workflows/ExportOptionsPlist.yml
    #   with:
    #     method: archive
    #     output: src-capacitor/ios/ExportOptionsPlist.yml

    # - name: Process secrets
    #   env:
    #     IOS_DEVCERT_FREE_P12_BASE64: ${{ secrets.IOS_DEVCERT_FREE_P12_BASE64 }}
    #     IOS_DEVCERT_FREE_PASSWORD: ${{secrets.IOS_DEVCERT_FREE_PASSWORD }}
    #     IOS_MOBILEPROVISIONING_BASE64: ${{ secrets.IOS_MOBILEPROVISIONING_BASE64 }}
    #     IOS_DEVELOPERTEAMID: ${{ secrets.IOS_DEVELOPERTEAMID }}
    #     IOS_DEVELOPERTEAMNAME: ${{ secrets.IOS_DEVELOPERTEAMNAME }}
    #   run: >
    #     echo -n "$IOS_DEVCERT_FREE_P12_BASE64" | base64 --decode -o cert.p12
    #     echo -n "$IOS_MOBILEPROVISIONING_BASE64" | base64 --decode -o App.mobileprovisioning

    # - name: Build archive
    #   run: >
    #     cd src-capacitor/ios/App &&
    #     xcodebuild build -scheme App -sdk iphoneos -destination generic/platform=iOS

    # - name: Build archive
    #   run: >
    #     cd src-capacitor/ios/App &&
    #     xcodebuild -exportArchive -archivePath ../App.xcarchive -exportPath ../build -exportOptionsPlist ../ExportOptions.plist archive

    - name: Build iOS archive
      run: >
        xcrun xcodebuild
        -workspace src-capacitor/ios/App/App.xcworkspace
        -scheme App
        -configuration release
        -archivePath dist/capacitor/ios/App.xcarchive
        archive
        CODE_SIGN_IDENTITY=''
        CODE_SIGN_ENTITLEMENTS=''
        CODE_SIGNING_REQUIRED=NO
        CODE_SIGNING_ALLOWED=NO
    #     -derivedDataPath dist/capacitor/ios
    #     # || true # Continue even if build fails
    #     # -automaticProvisioning=true
    #     # -device

    - name: List result
      run: >
        find dist/capacitor/ios/App.xcarchive
      #( find dist || true ) &&
      # ( find . -name '*.xcarchive' || true ) &&
      # ( find . -name '*.ipa' )
      #
    - name: Create unsigned IPA
      run: >
        cd dist/capacitor/ios &&
        mkdir -p Payload &&
        cp -r App.xcarchive/Products/Applications/App.app Payload/ &&
        zip -r App.ipa Payload/

    - name: Upload IPA
      uses: actions/upload-artifact@v3
      with:
        name: ipa
        path: dist/capacitor/ios/App.ipa


    # - name: Generate ExportOptions.plist
    #   run: >
    #     defaults write $(pwd)/dist/capacitor/ios/ExportOptions method development

    # - name: Export iOS archive
    #   run: >
    #     xcrun xcodebuild
    #     -exportArchive
    #     -archivePath dist/capacitor/ios/App.xcarchive
    #     -exportOptionsPlist dist/capacitor/ios/ExportOptions.plist
    #     -exportPath dist/capacitor/ios/
    #     CODE_SIGN_IDENTITY=''
    #     CODE_SIGN_ENTITLEMENTS=''
    #     CODE_SIGNING_REQUIRED=NO
    #     CODE_SIGNING_ALLOWED=NO
    #     AD_HOC_CODE_SIGNING_ALLOWED=YES

    #     # --developmentTeam={{ secrets.IOS_DEVTEAMID }}
    #     # --packageType=development
    #     # --buildFlag="CODE_SIGN_IDENTITY=''"
    #     # --buildFlag="CODE_SIGN_ENTITLEMENTS=''"
    #     # --buildFlag="CODE_SIGNING_REQUIRED=NO"
    #     # --buildFlag="CODE_SIGNING_ALLOWED=NO"
    #     # --automaticProvisioning=true


    # - name: create cordova ios tar package
    #   run: tar -czf src-cordova-ios.tar.gz /app/src-cordova/*

    # iOS-build:
    #   runs-on: macos-latest
    #   needs: setup
    #   steps:
    #     - name: download cordova package
    #       uses: actions/download-artifact@v3
    #       with:
    #         name: src-cordova-ios
    #         path: src-cordova.ios.tar.gz
    #     - name: unpack cordova package
    #       run: tar -zxf src-cordova-ios.tar.gz

    # - name: Sparkfabrik
    #   uses: sparkfabrik/ios-build-action@v2.3.0
    #   with:
    #       configuration: Release
    #       export-method: package
    #       workspace-path: src-capacitor/ios/App
    #       project-path: src-capacitor/ios/App
    #       output-path: build-${{ github.sha }}.ipa
    #       team-id: ${{ secrets.IOS_DEVELOPERTEAMID }}
    #       team-name: ${{ secrets.IOS_DEVELOPERTEAMNAME }}
    #       ios-app-id: org.sletteng.app.quasar1

